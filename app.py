import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pathlib import Path
import uuid
import shutil

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_FILE = "data/instructions.json"
UPLOADS_DIR = "uploads"

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    return []

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def add_history_entry(instruction, change_type, details, user="–°–∏—Å—Ç–µ–º–∞"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    if 'history' not in instruction:
        instruction['history'] = []
    
    history_entry = {
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'change_type': change_type,
        'details': details,
        'user': user
    }
    
    instruction['history'].append(history_entry)
    return instruction

def send_email(to_email, subject, body, yandex_email, yandex_password):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É"""
    try:
        msg = MIMEMultipart()
        msg['From'] = yandex_email
        msg['To'] = to_email
        msg['Subject'] = subject
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP('smtp.yandex.ru', 587)
        server.starttls()
        server.login(yandex_email, yandex_password)
        text = msg.as_string()
        server.sendmail(yandex_email, to_email, text)
        server.quit()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
        return False

def is_outdated(last_update_date, months_threshold=12):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if not last_update_date:
        return True
    
    try:
        update_date = datetime.strptime(last_update_date, "%Y-%m-%d")
        threshold_date = datetime.now() - timedelta(days=months_threshold * 30)
        return update_date < threshold_date
    except:
        return True

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ‚Äî –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú
    os.makedirs("data", exist_ok=True)
    os.makedirs(UPLOADS_DIR, exist_ok=True)
    
    st.title("üìã –î–∞—à–±–æ—Ä–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = load_data()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", [
        "üìä –û–±–∑–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", 
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
        "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    ])
    
    if page == "üìä –û–±–∑–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π":
        show_instructions_overview(data)
    elif page == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é":
        add_instruction(data)
    elif page == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é":
        edit_instruction(data)
    elif page == "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        send_reminders(data)
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_statistics(data)
    elif page == "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        auto_reminders(data)

def show_instructions_overview(data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    st.header("üìä –û–±–∑–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    
    if not data:
        st.info("üìù –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.")
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é:")
    
    with col2:
        department_filter = st.selectbox(
            "üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é:",
            ["–í—Å–µ"] + list(set([item.get('department', '') for item in data if item.get('department')]))
        )
    
    with col3:
        responsible_filter = st.selectbox(
            "üë§ –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É:",
            ["–í—Å–µ"] + list(set([item.get('responsible', '') for item in data if item.get('responsible')]))
        )
    
    with col4:
        status_filter = st.selectbox(
            "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
            ["–í—Å–µ", "–¢—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ"]
        )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_data = data.copy()
    
    if search_term:
        filtered_data = [item for item in filtered_data 
                        if search_term.lower() in item.get('title', '').lower()]
    
    if department_filter != "–í—Å–µ":
        filtered_data = [item for item in filtered_data 
                        if item.get('department') == department_filter]
    
    if responsible_filter != "–í—Å–µ":
        filtered_data = [item for item in filtered_data 
                        if item.get('responsible') == responsible_filter]
    
    if status_filter != "–í—Å–µ":
        if status_filter == "–¢—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏":
            filtered_data = [item for item in filtered_data 
                            if is_outdated(item.get('last_update'))]
        else:
            filtered_data = [item for item in filtered_data 
                            if not is_outdated(item.get('last_update'))]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", len(data))
    
    with col2:
        outdated_count = sum(1 for item in data if is_outdated(item.get('last_update')))
        st.metric("–¢—Ä–µ–±—É—é—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", outdated_count)
    
    with col3:
        with_files = sum(1 for item in data if item.get('has_file'))
        st.metric("–° —Ñ–∞–π–ª–∞–º–∏", with_files)
    
    with col4:
        without_files = len(data) - with_files
        st.metric("–ë–µ–∑ —Ñ–∞–π–ª–æ–≤", without_files)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    if filtered_data:
        st.subheader(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_data)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        for item in filtered_data:
            status = "üî¥ –¢—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏" if is_outdated(item.get('last_update')) else "üü¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è"
            file_status = "‚úÖ –ï—Å—Ç—å" if item.get('has_file') else "‚ùå –ù–µ—Ç"
            
            table_data.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": item.get('title', ''),
                "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ": item.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": item.get('registration_date', ''),
                "–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏": item.get('last_update', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": item.get('responsible', ''),
                "Email": item.get('email', ''),
                "–§–∞–π–ª": file_status,
                "–°—Ç–∞—Ç—É—Å": status
            })
        
        df = pd.DataFrame(table_data)
        st.dataframe(df, use_container_width=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        st.subheader("üìé –§–∞–π–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        for item in filtered_data:
            if item.get('has_file') and item.get('filename'):
                file_path = os.path.join(UPLOADS_DIR, item['filename'])
                if os.path.exists(file_path):
                    with open(file_path, 'rb') as f:
                        st.download_button(
                            label=f"üìÑ –°–∫–∞—á–∞—Ç—å: {item['title']}",
                            data=f.read(),
                            file_name=item['filename'],
                            key=f"download_{item['id']}"
                        )
    else:
        st.info("üîç –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def add_instruction(data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    st.header("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    with st.form("add_instruction_form"):
        title = st.text_input("üìã –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏*:")
        department = st.text_input("üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ*:")
        
        col1, col2 = st.columns(2)
        with col1:
            registration_date = st.date_input("üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*:", datetime.now())
        with col2:
            last_update = st.date_input("üîÑ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏*:", datetime.now())
        
        responsible = st.text_input("üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ*:")
        email = st.text_input("üìß Email –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ*:")
        
        uploaded_file = st.file_uploader(
            "üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
            type=['pdf', 'doc', 'docx', 'txt']
        )
        
        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        
        if submitted:
            if not all([title, department, registration_date, last_update, responsible, email]):
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_instruction = {
                'id': str(uuid.uuid4()),
                'title': title,
                'department': department,
                'registration_date': registration_date.strftime("%Y-%m-%d"),
                'last_update': last_update.strftime("%Y-%m-%d"),
                'responsible': responsible,
                'email': email,
                'has_file': uploaded_file is not None,
                'filename': None,
                'history': [],
                'file_versions': []
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_history_entry(new_instruction, '–°–æ–∑–¥–∞–Ω–∏–µ', f'–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "{title}"')
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploaded_file:
                filename = f"{new_instruction['id']}_{uploaded_file.name}"
                file_path = os.path.join(UPLOADS_DIR, filename)
                with open(file_path, 'wb') as f:
                    f.write(uploaded_file.read())
                new_instruction['filename'] = filename
                add_history_entry(new_instruction, '–§–∞–π–ª', f'–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_file.name}')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ
            data.append(new_instruction)
            save_data(data)
            
            st.success("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            st.rerun()

def edit_instruction(data):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    st.header("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    
    if not data:
        st.info("üìù –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.")
        return
    
    # –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    instruction_options = {item['title']: item['id'] for item in data}
    selected_title = st.selectbox("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                                 list(instruction_options.keys()))
    
    if selected_title:
        selected_id = instruction_options[selected_title]
        instruction = next(item for item in data if item['id'] == selected_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if instruction.get('history'):
            with st.expander("üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", expanded=False):
                for entry in reversed(instruction['history']):
                    st.markdown(f"**{entry['timestamp']}** - _{entry['change_type']}_")
                    st.text(entry['details'])
                    st.divider()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–æ–≤
        if instruction.get('file_versions'):
            with st.expander("üìÅ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤", expanded=False):
                for version in reversed(instruction['file_versions']):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.text(f"v{version['version']} - {version['original_name']} ({version['timestamp']})")
                    with col2:
                        file_path = os.path.join(UPLOADS_DIR, version['filename'])
                        if os.path.exists(file_path):
                            with open(file_path, 'rb') as f:
                                st.download_button(
                                    label="üì•",
                                    data=f.read(),
                                    file_name=version['original_name'],
                                    key=f"version_{version['version']}_{selected_id}"
                                )
        
        with st.form("edit_instruction_form"):
            title = st.text_input("üìã –ù–∞–∑–≤–∞–Ω–∏–µ:", value=instruction.get('title', ''))
            department = st.text_input("üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", value=instruction.get('department', ''))
            
            col1, col2 = st.columns(2)
            with col1:
                reg_date = datetime.strptime(instruction.get('registration_date', '2024-01-01'), "%Y-%m-%d")
                registration_date = st.date_input("üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", value=reg_date)
            with col2:
                update_date = datetime.strptime(instruction.get('last_update', '2024-01-01'), "%Y-%m-%d")
                last_update = st.date_input("üîÑ –î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏:", value=update_date)
            
            responsible = st.text_input("üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ:", 
                                      value=instruction.get('responsible', ''))
            email = st.text_input("üìß Email:", value=instruction.get('email', ''))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
            if instruction.get('has_file'):
                st.info(f"üìé –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {instruction.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            uploaded_file = st.file_uploader(
                "üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                type=['pdf', 'doc', 'docx', 'txt']
            )
            
            col1, col2 = st.columns(2)
            with col1:
                update_submitted = st.form_submit_button("‚úÖ –û–±–Ω–æ–≤–∏—Ç—å")
            with col2:
                delete_submitted = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", type="secondary")
            
            if update_submitted:
                if not all([title, department, registration_date, last_update, responsible, email]):
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if 'history' not in instruction:
                    instruction['history'] = []
                if 'file_versions' not in instruction:
                    instruction['file_versions'] = []
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                changes = []
                if instruction.get('title') != title:
                    changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: '{instruction.get('title')}' ‚Üí '{title}'")
                if instruction.get('department') != department:
                    changes.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: '{instruction.get('department', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}' ‚Üí '{department}'")
                if instruction.get('registration_date') != registration_date.strftime("%Y-%m-%d"):
                    changes.append(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞")
                if instruction.get('last_update') != last_update.strftime("%Y-%m-%d"):
                    changes.append(f"–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                if instruction.get('responsible') != responsible:
                    changes.append(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: '{instruction.get('responsible')}' ‚Üí '{responsible}'")
                if instruction.get('email') != email:
                    changes.append(f"Email –∏–∑–º–µ–Ω–µ–Ω")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                instruction.update({
                    'title': title,
                    'department': department,
                    'registration_date': registration_date.strftime("%Y-%m-%d"),
                    'last_update': last_update.strftime("%Y-%m-%d"),
                    'responsible': responsible,
                    'email': email
                })
                
                if changes:
                    add_history_entry(instruction, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '; '.join(changes))
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if uploaded_file:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞
                    if instruction.get('filename'):
                        old_filename = instruction['filename']
                        old_file_path = os.path.join(UPLOADS_DIR, old_filename)
                        if os.path.exists(old_file_path):
                            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏
                            version_num = len(instruction.get('file_versions', [])) + 1
                            version_filename = f"{instruction['id']}_v{version_num}_{old_filename.split('_', 1)[-1]}"
                            version_path = os.path.join(UPLOADS_DIR, version_filename)
                            
                            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –≤–µ—Ä—Å–∏—é
                            shutil.copy2(old_file_path, version_path)
                            
                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
                            instruction['file_versions'].append({
                                'version': version_num,
                                'filename': version_filename,
                                'original_name': old_filename.split('_', 1)[-1],
                                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            })
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
                            os.remove(old_file_path)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    filename = f"{instruction['id']}_{uploaded_file.name}"
                    file_path = os.path.join(UPLOADS_DIR, filename)
                    with open(file_path, 'wb') as f:
                        f.write(uploaded_file.read())
                    
                    instruction['filename'] = filename
                    instruction['has_file'] = True
                    
                    add_history_entry(instruction, '–§–∞–π–ª', f'–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞: {uploaded_file.name}')
                
                save_data(data)
                st.success("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                st.rerun()
            
            if delete_submitted:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                if st.session_state.get(f'confirm_delete_{selected_id}'):
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if instruction.get('filename'):
                        file_path = os.path.join(UPLOADS_DIR, instruction['filename'])
                        if os.path.exists(file_path):
                            os.remove(file_path)
                    
                    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    data.remove(instruction)
                    save_data(data)
                    
                    del st.session_state[f'confirm_delete_{selected_id}']
                    st.success("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.session_state[f'confirm_delete_{selected_id}'] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å' –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                    st.rerun()

def send_reminders(data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ email"""
    st.header("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    if not data:
        st.info("üìù –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    col1, col2 = st.columns(2)
    with col1:
        yandex_email = st.text_input("üìß –í–∞—à email –Ω–∞ –Ø–Ω–¥–µ–∫—Å–µ:")
    with col2:
        yandex_password = st.text_input("üîê –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", type="password")
    
    st.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã, –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    outdated_instructions = [item for item in data if is_outdated(item.get('last_update'))]
    instructions_without_files = [item for item in data if not item.get('has_file')]
    
    if outdated_instructions:
        st.subheader("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        for item in outdated_instructions:
            with st.expander(f"üìã {item['title']} - {item.get('responsible', '–ù–µ —É–∫–∞–∑–∞–Ω')}"):
                st.write(f"**–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏:** {item.get('last_update', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                st.write(f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {item.get('responsible', '')}")
                st.write(f"**Email:** {item.get('email', '')}")
                
                if st.button(f"üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
                           key=f"send_update_{item['id']}"):
                    if yandex_email and yandex_password:
                        subject = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {item['title']}"
                        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π {item.get('responsible', '–∫–æ–ª–ª–µ–≥–∞')}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "{item['title']}" —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏: {item.get('last_update', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item.get('registration_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–ü—Ä–æ—Å—å–±–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
                        
                        if send_email(item.get('email'), subject, body, yandex_email, yandex_password):
                            st.success(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {item.get('responsible')}")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {item.get('responsible')}")
                    else:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
    
    if instructions_without_files:
        st.subheader("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤")
        for item in instructions_without_files:
            with st.expander(f"üìã {item['title']} - {item.get('responsible', '–ù–µ —É–∫–∞–∑–∞–Ω')}"):
                st.write(f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {item.get('responsible', '')}")
                st.write(f"**Email:** {item.get('email', '')}")
                
                if st.button(f"üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", 
                           key=f"send_file_{item['id']}"):
                    if yandex_email and yandex_password:
                        subject = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {item['title']}"
                        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π {item.get('responsible', '–∫–æ–ª–ª–µ–≥–∞')}!

–î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "{item['title']}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª.

–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item.get('registration_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–ü—Ä–æ—Å—å–±–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
                        
                        if send_email(item.get('email'), subject, body, yandex_email, yandex_password):
                            st.success(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {item.get('responsible')}")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {item.get('responsible')}")
                    else:
                        st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
    
    # –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    if outdated_instructions or instructions_without_files:
        st.subheader("üì® –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
        
        col1, col2 = st.columns(2)
        with col1:
            if outdated_instructions and st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"):
                if yandex_email and yandex_password:
                    success_count = 0
                    for item in outdated_instructions:
                        subject = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {item['title']}"
                        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π {item.get('responsible', '–∫–æ–ª–ª–µ–≥–∞')}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "{item['title']}" —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏: {item.get('last_update', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item.get('registration_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–ü—Ä–æ—Å—å–±–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
                        
                        if send_email(item.get('email'), subject, body, yandex_email, yandex_password):
                            success_count += 1
                    
                    st.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(outdated_instructions)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
        
        with col2:
            if instructions_without_files and st.button("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∞–π–ª–∞—Ö"):
                if yandex_email and yandex_password:
                    success_count = 0
                    for item in instructions_without_files:
                        subject = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {item['title']}"
                        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π {item.get('responsible', '–∫–æ–ª–ª–µ–≥–∞')}!

–î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "{item['title']}" –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª.

–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item.get('registration_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–ü—Ä–æ—Å—å–±–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
                        
                        if send_email(item.get('email'), subject, body, yandex_email, yandex_password):
                            success_count += 1
                    
                    st.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(instructions_without_files)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
    
    if not outdated_instructions and not instructions_without_files:
        st.success("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")

def show_statistics(data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    if not data:
        st.info("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
        return
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3, col4 = st.columns(4)
    
    total_instructions = len(data)
    outdated_count = sum(1 for item in data if is_outdated(item.get('last_update')))
    with_files = sum(1 for item in data if item.get('has_file'))
    without_files = total_instructions - with_files
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", total_instructions)
    with col2:
        st.metric("–¢—Ä–µ–±—É—é—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", outdated_count, 
                 delta=f"-{round((outdated_count/total_instructions)*100, 1)}%" if outdated_count > 0 else "0%",
                 delta_color="inverse")
    with col3:
        st.metric("–° —Ñ–∞–π–ª–∞–º–∏", with_files,
                 delta=f"{round((with_files/total_instructions)*100, 1)}%")
    with col4:
        st.metric("–ë–µ–∑ —Ñ–∞–π–ª–æ–≤", without_files,
                 delta=f"-{round((without_files/total_instructions)*100, 1)}%" if without_files > 0 else "0%",
                 delta_color="inverse")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –î–∏–∞–≥—Ä–∞–º–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        st.markdown("**–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏**")
        status_data = pd.DataFrame({
            '–°—Ç–∞—Ç—É—Å': ['–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ', '–¢—Ä–µ–±—É—é—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [total_instructions - outdated_count, outdated_count]
        })
        st.bar_chart(status_data.set_index('–°—Ç–∞—Ç—É—Å'))
    
    with col2:
        # –î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
        st.markdown("**–ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤**")
        file_data = pd.DataFrame({
            '–°—Ç–∞—Ç—É—Å': ['–° —Ñ–∞–π–ª–∞–º–∏', '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [with_files, without_files]
        })
        st.bar_chart(file_data.set_index('–°—Ç–∞—Ç—É—Å'))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
    st.subheader("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º")
    
    responsible_stats = {}
    for item in data:
        resp = item.get('responsible', '–ù–µ —É–∫–∞–∑–∞–Ω')
        if resp not in responsible_stats:
            responsible_stats[resp] = {'total': 0, 'outdated': 0, 'without_file': 0}
        responsible_stats[resp]['total'] += 1
        if is_outdated(item.get('last_update')):
            responsible_stats[resp]['outdated'] += 1
        if not item.get('has_file'):
            responsible_stats[resp]['without_file'] += 1
    
    resp_table = []
    for resp, stats in responsible_stats.items():
        resp_table.append({
            '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': resp,
            '–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π': stats['total'],
            '–¢—Ä–µ–±—É—é—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏': stats['outdated'],
            '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤': stats['without_file']
        })
    
    if resp_table:
        df_resp = pd.DataFrame(resp_table)
        st.dataframe(df_resp, use_container_width=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.subheader("üìÖ –î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    update_dates = []
    for item in data:
        if item.get('last_update'):
            try:
                date = datetime.strptime(item['last_update'], "%Y-%m-%d")
                update_dates.append(date.strftime("%Y-%m"))
            except:
                pass
    
    if update_dates:
        from collections import Counter
        date_counts = Counter(update_dates)
        date_df = pd.DataFrame({
            '–ú–µ—Å—è—Ü': list(date_counts.keys()),
            '–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–π': list(date_counts.values())
        }).sort_values('–ú–µ—Å—è—Ü')
        
        st.line_chart(date_df.set_index('–ú–µ—Å—è—Ü'))
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏")
    
    # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    st.subheader("üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    all_changes = []
    for item in data:
        if item.get('history'):
            for entry in item['history']:
                all_changes.append({
                    '–í—Ä–µ–º—è': entry['timestamp'],
                    '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': item['title'],
                    '–¢–∏–ø': entry['change_type'],
                    '–î–µ—Ç–∞–ª–∏': entry['details']
                })
    
    if all_changes:
        all_changes_sorted = sorted(all_changes, key=lambda x: x['–í—Ä–µ–º—è'], reverse=True)[:20]
        df_changes = pd.DataFrame(all_changes_sorted)
        st.dataframe(df_changes, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel"):
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            from io import BytesIO
            output = BytesIO()
            
            # Prepare data first
            df_resp_export = None
            all_changes_sorted_export = None
            
            if resp_table:
                df_resp_export = df_resp
            
            if all_changes:
                all_changes_sorted_export = all_changes_sorted
            
            with pd.ExcelWriter(output, engine='openpyxl', mode='w') as writer:
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                main_data = []
                for item in data:
                    main_data.append({
                        '–ù–∞–∑–≤–∞–Ω–∏–µ': item.get('title', ''),
                        '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': item.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': item.get('registration_date', ''),
                        '–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏': item.get('last_update', ''),
                        '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': item.get('responsible', ''),
                        'Email': item.get('email', ''),
                        '–ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞': '–î–∞' if item.get('has_file') else '–ù–µ—Ç',
                        '–°—Ç–∞—Ç—É—Å': '–¢—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏' if is_outdated(item.get('last_update')) else '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è'
                    })
                df_main = pd.DataFrame(main_data)
                df_main.to_excel(writer, sheet_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', index=False)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
                if df_resp_export is not None:
                    df_resp_export.to_excel(writer, sheet_name='–ü–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º', index=False)
                
                # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if all_changes_sorted_export:
                    df_changes_full = pd.DataFrame(all_changes_sorted_export)
                    df_changes_full.to_excel(writer, sheet_name='–ò—Å—Ç–æ—Ä–∏—è', index=False)
            
            output.seek(0)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç",
                data=output.getvalue(),
                file_name=f"report_instructions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            st.success("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

def auto_reminders(data):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    st.header("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    st.info("""
    ‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö**
    
    –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    
    1. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ** (cron –Ω–∞ Linux, Task Scheduler –Ω–∞ Windows)
    2. **–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç** –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    3. **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ** –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    
    Streamlit —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
    """)
    
    st.subheader("üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    st.markdown("""
    ### –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cron (Linux)
    
    –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `send_reminders.py` —Å –∫–æ–¥–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ crontab:
    
    ```bash
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00
    0 9 * * 1 python /path/to/send_reminders.py
    ```
    
    ### –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á Windows
    
    1. –û—Ç–∫—Ä–æ–π—Ç–µ "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π"
    2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    3. –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
    4. –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –∑–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–∞
    
    ### –í–∞—Ä–∏–∞–Ω—Ç 3: –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    
    –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """)
    
    st.subheader("üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    with st.form("script_generator"):
        yandex_email = st.text_input("üìß Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞):")
        
        st.info("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        frequency = st.selectbox("üìÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", [
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)",
            "–ï–∂–µ–º–µ—Å—è—á–Ω–æ (1-–µ —á–∏—Å–ª–æ)"
        ])
        
        time_hour = st.selectbox("üïê –ß–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:", list(range(0, 24)), index=9)
        
        if st.form_submit_button("üìù –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"):
            if not yandex_email:
                st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                script_content = f'''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
–°–æ–∑–¥–∞–Ω: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta

DATA_FILE = "data/instructions.json"
YANDEX_EMAIL = "{yandex_email}"
YANDEX_PASSWORD = "YOUR_APP_PASSWORD_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

def load_data():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def is_outdated(last_update_date, months_threshold=12):
    if not last_update_date:
        return True
    try:
        update_date = datetime.strptime(last_update_date, "%Y-%m-%d")
        threshold_date = datetime.now() - timedelta(days=months_threshold * 30)
        return update_date < threshold_date
    except:
        return True

def send_email(to_email, subject, body):
    try:
        msg = MIMEMultipart()
        msg['From'] = YANDEX_EMAIL
        msg['To'] = to_email
        msg['Subject'] = subject
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP('smtp.yandex.ru', 587)
        server.starttls()
        server.login(YANDEX_EMAIL, YANDEX_PASSWORD)
        text = msg.as_string()
        server.sendmail(YANDEX_EMAIL, to_email, text)
        server.quit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {{str(e)}}")
        return False

def main():
    data = load_data()
    outdated_instructions = [item for item in data if is_outdated(item.get('last_update'))]
    
    success_count = 0
    for item in outdated_instructions:
        subject = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {{item['title']}}"
        body = f"""–£–≤–∞–∂–∞–µ–º—ã–π {{item.get('responsible', '–∫–æ–ª–ª–µ–≥–∞')}}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "{{item['title']}}" —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.

–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏: {{item.get('last_update', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {{item.get('registration_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}}

–ü—Ä–æ—Å—å–±–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
        
        if send_email(item.get('email'), subject, body):
            success_count += 1
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {{item['title']}} -> {{item.get('responsible')}}")
    
    print(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {{success_count}} –∏–∑ {{len(outdated_instructions)}} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}}")

if __name__ == "__main__":
    main()
'''
                
                st.success("‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω!")
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç",
                    data=script_content,
                    file_name="send_reminders.py",
                    mime="text/x-python"
                )
                
                # –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron
                if frequency == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
                    cron_example = f"{time_hour} {time_hour} * * * python /path/to/send_reminders.py >> /var/log/reminders.log 2>&1"
                elif frequency == "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)":
                    cron_example = f"0 {time_hour} * * 1 python /path/to/send_reminders.py >> /var/log/reminders.log 2>&1"
                else:  # –ï–∂–µ–º–µ—Å—è—á–Ω–æ
                    cron_example = f"0 {time_hour} 1 * * python /path/to/send_reminders.py >> /var/log/reminders.log 2>&1"
                
                st.markdown("### –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron:")
                st.code(cron_example, language="bash")
    
    st.subheader("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    if data:
        outdated_count = sum(1 for item in data if is_outdated(item.get('last_update')))
        no_file_count = sum(1 for item in data if not item.get('has_file'))
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–¢—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", outdated_count)
        with col2:
            st.metric("–¢—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∞–π–ª–∞—Ö", no_file_count)
    else:
        st.info("–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
